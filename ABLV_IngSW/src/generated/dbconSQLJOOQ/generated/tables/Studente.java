/*
 * This file is generated by jOOQ.
 */
package dbconSQLJOOQ.generated.tables;


import dbconSQLJOOQ.generated.DefaultSchema;
import dbconSQLJOOQ.generated.Keys;
import dbconSQLJOOQ.generated.tables.records.StudenteRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Studente extends TableImpl<StudenteRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>Studente</code>
     */
    public static final Studente STUDENTE = new Studente();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StudenteRecord> getRecordType() {
        return StudenteRecord.class;
    }

    /**
     * The column <code>Studente.id</code>.
     */
    public final TableField<StudenteRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.identity(true), this, "");

    /**
     * The column <code>Studente.nome</code>.
     */
    public final TableField<StudenteRecord, String> NOME = createField(DSL.name("nome"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>Studente.annoNascita</code>.
     */
    public final TableField<StudenteRecord, Integer> ANNONASCITA = createField(DSL.name("annoNascita"), SQLDataType.INTEGER, this, "");

    private Studente(Name alias, Table<StudenteRecord> aliased) {
        this(alias, aliased, null);
    }

    private Studente(Name alias, Table<StudenteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>Studente</code> table reference
     */
    public Studente(String alias) {
        this(DSL.name(alias), STUDENTE);
    }

    /**
     * Create an aliased <code>Studente</code> table reference
     */
    public Studente(Name alias) {
        this(alias, STUDENTE);
    }

    /**
     * Create a <code>Studente</code> table reference
     */
    public Studente() {
        this(DSL.name("Studente"), null);
    }

    public <O extends Record> Studente(Table<O> child, ForeignKey<O, StudenteRecord> key) {
        super(child, key, STUDENTE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<StudenteRecord, Integer> getIdentity() {
        return (Identity<StudenteRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<StudenteRecord> getPrimaryKey() {
        return Keys.STUDENTE__PK_STUDENTE;
    }

    @Override
    public Studente as(String alias) {
        return new Studente(DSL.name(alias), this);
    }

    @Override
    public Studente as(Name alias) {
        return new Studente(alias, this);
    }

    @Override
    public Studente as(Table<?> alias) {
        return new Studente(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Studente rename(String name) {
        return new Studente(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Studente rename(Name name) {
        return new Studente(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Studente rename(Table<?> name) {
        return new Studente(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
