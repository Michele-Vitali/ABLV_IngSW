/*
 * This file is generated by jOOQ.
 */
package dbconSQLJOOQ.generated.tables.records;


import dbconSQLJOOQ.generated.tables.Studente;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StudenteRecord extends UpdatableRecordImpl<StudenteRecord> implements Record3<Integer, String, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>Studente.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>Studente.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>Studente.nome</code>.
     */
    public void setNome(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>Studente.nome</code>.
     */
    public String getNome() {
        return (String) get(1);
    }

    /**
     * Setter for <code>Studente.annoNascita</code>.
     */
    public void setAnnonascita(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>Studente.annoNascita</code>.
     */
    public Integer getAnnonascita() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, String, Integer> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Studente.STUDENTE.ID;
    }

    @Override
    public Field<String> field2() {
        return Studente.STUDENTE.NOME;
    }

    @Override
    public Field<Integer> field3() {
        return Studente.STUDENTE.ANNONASCITA;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getNome();
    }

    @Override
    public Integer component3() {
        return getAnnonascita();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getNome();
    }

    @Override
    public Integer value3() {
        return getAnnonascita();
    }

    @Override
    public StudenteRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public StudenteRecord value2(String value) {
        setNome(value);
        return this;
    }

    @Override
    public StudenteRecord value3(Integer value) {
        setAnnonascita(value);
        return this;
    }

    @Override
    public StudenteRecord values(Integer value1, String value2, Integer value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached StudenteRecord
     */
    public StudenteRecord() {
        super(Studente.STUDENTE);
    }

    /**
     * Create a detached, initialised StudenteRecord
     */
    public StudenteRecord(Integer id, String nome, Integer annonascita) {
        super(Studente.STUDENTE);

        setId(id);
        setNome(nome);
        setAnnonascita(annonascita);
        resetChangedOnNotNull();
    }
}
